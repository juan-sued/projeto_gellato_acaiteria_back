generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id              Int      @id @default(autoincrement())
  name            String   @db.VarChar(255)
  email           String   @unique @db.VarChar(100)
  phone           String?  @db.VarChar(12)
  cpf             String?  @unique @db.VarChar(11)
  password        String   @db.Text()
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isAdministrator Boolean  @default(false) @db.Boolean()

  ofertsOfDay ofertsOfDay[]
  favoriteds  favoriteds[]
  feedbacks   feedbacks[]
  orders      orders[]
  addresses   addresses[]
}

model addresses {
  id              Int      @id @default(autoincrement())
  userId          Int      @db.Integer
  cep             String   @db.VarChar(255)
  street          String   @db.VarChar(255)
  city            String   @db.VarChar(255)
  state           String   @db.VarChar(255)
  number          String   @db.VarChar(255)
  neighborhood    String   @db.VarChar(255)
  addressesDetail String?  @db.VarChar(255)
  user            users    @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model feedbacks {
  id        Int     @id @default(autoincrement())
  userId    Int     @db.SmallInt()
  feedbacks String? @db.Text()
  stars     String  @db.VarChar(3)

  user users @relation(fields: [userId], references: [id])
}

model categories {
  id          Int     @id @default(autoincrement())
  name    String  @unique @db.VarChar(50)
  description String  @unique @db.VarChar(100)
  stock       stock[]

}

model favoriteds {
  id        Int      @id @default(autoincrement())
  userId    Int      @db.SmallInt()
  productId Int      @db.SmallInt()
  user      users    @relation(fields: [userId], references: [id])
  product   products @relation(fields: [productId], references: [id])
}

model orders {
  id          Int       @id @default(autoincrement())
  userId      Int       @db.SmallInt()
  total       Decimal
  subTotal    Decimal
  status      String
  createdAt   DateTime  @default(now())
  isDelivered DateTime? @db.Timestamp()

  user     users            @relation(fields: [userId], references: [id])
  products order_products[]
}

model ofertsOfDay {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique @db.Integer
  productId   Int     @db.Integer
  description String  @unique
  price_ofert Decimal

  user    users    @relation(fields: [userId], references: [id])
  product products @relation(fields: [productId], references: [id])
}

model stock_products {
  id        Int      @id @default(autoincrement())
  stockId   Int      @db.Integer
  productId Int      @db.Integer
  stock     stock    @relation(fields: [stockId], references: [id])
  product   products @relation(fields: [productId], references: [id])
}

model products {
  id            Int              @id @default(autoincrement())
  name          String
  image         String
  price         Decimal
  cupSizeId     Int?
  stock         stock_products[]
  orderProducts order_products[]
  favoriteds    favoriteds[]
  ofertsOfDay   ofertsOfDay[]
}

model order_products {
  id        Int      @id @default(autoincrement())
  orderId   Int      @db.Integer
  productId Int      @db.Integer
  quantity  Int
  orders    orders   @relation(fields: [orderId], references: [id])
  product   products @relation(fields: [productId], references: [id])
}

model stock {
  id                 Int     @id @default(autoincrement())
  title              String  @unique
  image              String
  price              Decimal
  description        String
  categoryId         Int     @db.Integer
  unit_of_measure    String
  amount             Int
  quantity_for_unity Decimal

  category       categories       @relation(fields: [categoryId], references: [id])
  stock_products stock_products[]
}
