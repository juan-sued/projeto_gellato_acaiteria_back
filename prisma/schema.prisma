// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//=====================  users =====================//
model users {
  id              Int      @id @default(autoincrement())
  name            String   @db.VarChar(255)
  email           String   @unique @db.VarChar(100)
  phone           String?  @db.VarChar(12)
  cpf             String?  @unique @db.VarChar(11)
  password        String   @db.Text()
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isAdministrator Boolean  @default(false) @db.Boolean()

  favoriteds favoriteds[]
  feedbacks  feedbacks[]
  orders     orders[]
  addresses  addresses[]
}

model feedbacks {
  id       Int     @id @default(autoincrement())
  userId   Int     @db.SmallInt()
  feedback String? @db.Text()
  stars    String  @db.VarChar(3)

  user users @relation(fields: [userId], references: [id])
}

//=====================  products =====================//

model products {
  id             Int          @id @default(autoincrement())
  title          String       @unique @db.VarChar(150)
  image          String       @db.VarChar(100)
  price          Int          @db.SmallInt()
  description    String       @db.VarChar(70)
  categoryId     Int          @db.SmallInt()
  quantityPerCup Decimal      @db.Decimal()
  isOfertOfDay   Boolean      @default(false) @db.Boolean()
  favoriteds     favoriteds[]
  category       categories   @relation(fields: [categoryId], references: [id])
  orders         orders[]
  stock          stock[]
  historic       historic[]
}

model categories {
  id          Int        @id @default(autoincrement())
  category    String     @unique @db.VarChar(50)
  description String     @unique @db.VarChar(100)
  products    products[]
}

model favoriteds {
  id        Int      @id @default(autoincrement())
  userId    Int      @db.SmallInt()
  productId Int      @db.SmallInt()
  user      users    @relation(fields: [userId], references: [id])
  product   products @relation(fields: [productId], references: [id])
}

model orders {
  id          Int       @id @default(autoincrement())
  userId      Int       @db.SmallInt()
  productId   Int       @db.SmallInt()
  createdAt   DateTime  @db.Timestamp()
  isDelivered DateTime? @db.Timestamp()
  user        users     @relation(fields: [userId], references: [id])
  product     products  @relation(fields: [productId], references: [id])
}

//=====================  adresses =====================//
model addresses {
  id            Int      @id @default(autoincrement())
  userId        Int      @db.Integer()
  cep           String   @db.VarChar(10)
  street        String   @db.VarChar(255)
  city          String   @db.VarChar(254)
  state         String   @db.VarChar(2)
  number        Int      @db.SmallInt()
  neighborhood  String   @db.VarChar(255)
  addressDetail String?  @db.VarChar(255)
  user          users    @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

//=====================  administrator =====================//

model stock {
  id           Int      @id @default(autoincrement())
  productId    Int      @db.SmallInt()
  quantity     Int      @db.Integer()
  purchaseDate DateTime @db.Date()
  notes        String   @db.Text()
  product      products @relation(fields: [productId], references: [id])
}

model historic {
  id           Int      @id @default(autoincrement())
  productId    Int      @db.SmallInt()
  salesCounter Int      @db.Integer()
  dataSold     DateTime @db.Date()
  productValue Int      @db.SmallInt()
  product      products @relation(fields: [productId], references: [id])
}
